import unittest, omnical._omnical as _O
import cmath, math
import random
import numpy as np
import scipy as sci
import aipy as ap
import scipy.linalg as la
import commands, os, time, math, ephem
import omnical.calibration_omni as omni
from operator import itemgetter, attrgetter, methodcaller
from matplotlib import pyplot as plt



main_array = [9,9]
nant=main_array[0]*main_array[1]


hier_ways = 1
mini_cell = [[3,3],[9,9],[81,81]]


nfile = 10
range_noise = 14
ntimes = 100
#index=5


min_noise = -49.0
step_noise = 3.0
deviation = np.zeros(range_noise)
deviation = [10**((min_noise+magnitude_noise*step_noise)/10.0) for magnitude_noise in range(range_noise)]


chi2_multi = np.zeros((hier_ways,nfile,range_noise))
chi2_multi_Refined = np.zeros((hier_ways, range_noise))
#chi2_multi_Refined[hier_ways-1] = chi2_multi_Refined[hier_ways-1] + 1.0


diff_scale = np.zeros((hier_ways,nfile,range_noise))
diff_vector = np.zeros((hier_ways,nfile,range_noise,nant)).astype('complex64')



for LEV in range(hier_ways):

	cell = mini_cell[LEV] #(side>=3)#
	#cell = [mini_cell[0]**(2*LEV), mini_cell[1]**(2*LEV)] #(side>=3)#
	ncell = cell[0]*cell[1]
	#levels = 2**(2-LEV)
	levels = int(math.log(main_array[0], mini_cell[LEV][0]))
	nstandards = 3
	dimension = 2
	
	
	standard_origin_order = [None]*nstandards
	order_standard = [ncell-1, ncell-(cell[0]//2)*cell[1], ncell-(cell[0]-1)*cell[1]-2]
	
	
	
	for index in range(nfile):
		
		arrayinfopath = os.path.split(os.path.dirname(os.path.realpath(__file__)))[0] + '/Point_test_arrayinfo_%i.txt'%index
		#arrayinfopath = '/home/jianshu/Documents/Research/Calibration' + '/Point_test_arrayinfo_%i.txt'%index
		datapath = os.path.split(os.path.dirname(os.path.realpath(__file__)))[0] + '/Point_test_data_%i.txt'%index
		#datapath = '/home/jianshu/Documents/Research/Calibration' + '/Point_test_data_%i.txt'%index
		receivepath = os.path.split(os.path.dirname(os.path.realpath(__file__)))[0] + '/Point_test_receive_%i.txt'%index
		#receivepath = '/home/jianshu/Documents/Research/Calibration' + '/Point_test_receive_%i.txt'%index
		
		
		#calibrator = omni.RedundantCalibrator(nant)
		#calibrator.compute_redundantinfo(arrayinfopath)
		#info = calibrator.Info.get_info()
		
		
		with open(arrayinfopath) as f:
			rawinfo = [[float(x) for x in line.split()] for line in f]
			
		with open(datapath) as f:
			rawdata = [[float(x) for x in line.split()] for line in f]
		
		with open(receivepath) as f:
			rawreceive = [[float(x) for x in line.split()] for line in f]
		
		excluded_array = rawinfo[0]
		excluded_baseline_raw = rawinfo[1]
		excluded_baseline_refined = [[excluded_baseline_raw[2*b], excluded_baseline_raw[2*b+1]] for b in range(len(excluded_baseline_raw)//2)]
		tolerence = rawinfo[2]		
		loc_info = rawinfo[3:(3+nant)]
		pair_info = rawinfo[(3+nant):]
		data_pure = np.array([i[0] + 1.0j*i[1] for i in rawdata[:-1]],dtype = 'complex64')    #last element of rawinfo is empty
		receive_info = np.array([i[0] + 1.0j*i[1] for i in rawreceive[:-1]],dtype = 'complex64')
		#data = data.reshape((1,1,len(data)))
		
		for magnitude_noise in range(range_noise):
			chi2 = np.zeros(ntimes)
			#deviation[magnitude_noise] = 10**((-40.0+magnitude_noise*3.0)/10.0)
			
			for trial in range(ntimes):
				
				noise = (np.random.normal(scale = deviation[magnitude_noise], size = data_pure.shape) + 1.0j*np.random.normal(scale = deviation[magnitude_noise], size = data_pure.shape)).astype('complex64')
				data = data_pure + noise
				#calibrator.logcal(data, np.zeros_like(data), verbose=True)
		
				loc_info_tuple = [ tuple(loc_info[i]) for i in range(len(loc_info)) ]
				loc_info_tuple_sorted = sorted(loc_info_tuple, key=itemgetter(0,1,2))
				loc_info_matrix = (np.array(loc_info_tuple_sorted)).reshape(cell[0]**levels,cell[1]**levels,3)
				submatrix_loc = loc_info_matrix
				
				submatrix_info = [None]*levels
				submatrix_refined = [None]*levels
				submatrix_refined_temp = np.zeros(3)
				submatrix_calpar_Refined = [None]*levels
				submatrix_calpar_amplitude = [None]*levels
				submatrix_calpar_phase = [None]*levels
				submatrix_transcoef_Refined = [None]*levels
				
				submatrix_calpar_Refined_calibrated = [None]*levels
				submatrix_calpar_amplitude_calibrated = [None]*levels
				submatrix_calpar_phase_calibrated = [None]*levels
				amplitude_shift = [None]*levels
				phase_shift = [None]*levels
				
				calpar_calibrated_original = np.zeros(ncell**levels).astype('complex64')
				DOF = 0
				
				
				for lev in range(levels,0,-1):
					
						
					submatrix_raw = np.zeros((cell[0]**(lev-1),cell[1]**(lev-1),cell[0],cell[1],3))
					submatrix_refined[lev-1] = np.zeros((cell[0]**(lev-1),cell[1]**(lev-1),ncell,3))
					
					submatrix_calpar_Raw = np.zeros((cell[0]**(lev-1),cell[1]**(lev-1),cell[0],cell[1])).astype('complex64')
					submatrix_calpar_Refined[lev-1] = np.zeros((cell[0]**(lev-1),cell[1]**(lev-1),ncell)).astype('complex64')
					submatrix_calpar_amplitude[lev-1] = np.zeros((cell[0]**(lev-1),cell[1]**(lev-1),ncell))
					submatrix_calpar_phase[lev-1] = np.zeros((cell[0]**(lev-1),cell[1]**(lev-1),ncell))
					
					submatrix_calpar_Refined_calibrated[lev-1] = np.zeros((cell[0]**(lev-1),cell[1]**(lev-1),ncell)).astype('complex64')
					submatrix_calpar_amplitude_calibrated[lev-1] = np.zeros((cell[0]**(lev-1),cell[1]**(lev-1),ncell))
					submatrix_calpar_phase_calibrated[lev-1] = np.zeros((cell[0]**(lev-1),cell[1]**(lev-1),ncell))
					
					amplitude_shift[lev-1] = np.zeros((cell[0]**(lev-1),cell[1]**(lev-1)))
					if lev==levels:
						phase_shift[lev-1] = np.zeros(ncell)
					else:
						phase_shift[lev-1] = np.zeros((cell[0]**(lev-1),cell[1]**(lev-1)))	
					
				
					
					submatrix_exarray = [[None]*cell[1]**(lev-1)]*cell[0]**(lev-1)
					submatrix_exbline = [[None]*cell[1]**(lev-1)]*cell[0]**(lev-1)
					submatrix_tolerence = [[None]*cell[1]**(lev-1)]*cell[0]**(lev-1)
					submatrix_pair = [[None]*cell[1]**(lev-1)]*cell[0]**(lev-1)
					submatrix_data = [[None]*cell[1]**(lev-1)]*cell[0]**(lev-1)
					
					#submatrix_exbline_temp = []
					#submatrix_exarray_temp = []
					#submatrix_tolerence_temp = tolerence
					#submatrix_pair_temp = []
					#submatrix_data_temp = []
					
					submatrix_info[lev-1] = [[[None]]*cell[1]**(lev-1)]*cell[0]**(lev-1)
					
					
					
					for xdex in range(cell[0]**(lev-1)):
						for ydex in range(cell[1]**(lev-1)):
							
							submatrix_exbline_temp = []
							submatrix_exarray_temp = []
							submatrix_tolerence_temp = tolerence
							submatrix_pair_temp = []
							submatrix_data_temp = []
							
							#submatrix_raw[xdex][ydex] = loc_info_matrix[ xdex*cell[0]:(xdex+1)*cell[0], ydex*cell[1]:(ydex+1)*cell[1] ]
							if lev==levels:
								submatrix_raw[xdex][ydex] = submatrix_loc[ xdex*cell[0]:(xdex+1)*cell[0], ydex*cell[1]:(ydex+1)*cell[1] ] 
								submatrix_refined[lev-1][xdex][ydex] = submatrix_raw[xdex][ydex].reshape(ncell,3)
								origin_order3 = loc_info_tuple.index(tuple(submatrix_refined[lev-1][xdex][ydex][ncell-1]))      
								if origin_order3 in excluded_array:
									for p3 in range(ncell-2,-1,-1):
										origin_order4 = loc_info_tuple.index(tuple(submatrix_refined[lev-1][xdex][ydex][p3]))
										if not (origin_order4 in excluded_array):
											submatrix_refined_temp = submatrix_refined[lev-1][xdex][ydex][ncell-1]
											submatrix_refined[lev-1][xdex][ydex][ncell-1] = submatrix_refined[lev-1][xdex][ydex][p3]
											submatrix_refined[lev-1][xdex][ydex][p3] = submatrix_raw[xdex][ydex][cell[0]-1][cell[1]-1]
											break
									submatrix_raw[xdex][ydex] = submatrix_refined[lev-1][xdex][ydex].reshape((cell[0],cell[1],3))	
									
							else:
								submatrix_raw[xdex][ydex] = submatrix_loc[ xdex*cell[0]:(xdex+1)*cell[0], ydex*cell[1]:(ydex+1)*cell[1], cell[0]-1, cell[1]-1 ] 
								submatrix_refined[lev-1][xdex][ydex] = submatrix_raw[xdex][ydex].reshape(ncell,3)
								origin_order1 = loc_info_tuple.index(tuple(submatrix_refined[lev-1][xdex][ydex][ncell-1]))      
								if origin_order1 in excluded_array:
									for p1 in range(ncell-2,-1,-1):
										origin_order2 = loc_info_tuple.index(tuple(submatrix_refined[lev-1][xdex][ydex][p1]))
										if not (origin_order2 in excluded_array):
											submatrix_refined_temp = submatrix_refined[lev-1][xdex][ydex][ncell-1]
											submatrix_refined[lev-1][xdex][ydex][ncell-1] = submatrix_refined[lev-1][xdex][ydex][p1]
											submatrix_refined[lev-1][xdex][ydex][p1] = submatrix_raw[xdex][ydex][cell[0]-1][cell[1]-1]
											break
									submatrix_raw[xdex][ydex] = submatrix_refined[lev-1][xdex][ydex].reshape((cell[0],cell[1],3))	
												
							#submatrix_raw[xdex][ydex] = submatrix_loc[ xdex*cell[0]:(xdex+1)*cell[0], ydex*cell[1]:(ydex+1)*cell[1] ] 
							#submatrix_refined[xdex][ydex] = submatrix_raw[xdex][ydex].reshape(ncell,3)
							
							submatrix_path = os.path.dirname(os.path.realpath(__file__)) + '/Data/Sublocation_%i_%i_%i.txt'%(lev,xdex,ydex)
							#submatrix_path = '/home/jianshu/Documents/Research/Calibration'  + '/Codes/Data/Sublocation_%i_%i_%i.txt'%(lev,xdex,ydex)
							np.savetxt('%s'%submatrix_path, submatrix_refined[lev-1][xdex][ydex])
							
							for p2 in range(ncell):
								origin_order2 = loc_info_tuple.index(tuple(submatrix_refined[lev-1][xdex][ydex][p2]))      
								if origin_order2 in excluded_array:
									submatrix_exarray_temp.append(p2)
								
								for p1 in range(ncell):
									
									origin_order1 = loc_info_tuple.index(tuple(submatrix_refined[lev-1][xdex][ydex][p1]))									
									
									if [origin_order1, origin_order2] in pair_info:
										origin_order_pair = pair_info.index([origin_order1,origin_order2])
										submatrix_pair_temp.append([p1,p2])
										submatrix_data_temp.append(data[origin_order_pair])
										
									if [origin_order1, origin_order2] in excluded_baseline_refined:
										submatrix_exbline_temp.append(origin_order1, origin_order2)
							
							
										
							submatrix_pair[xdex][ydex] = submatrix_pair_temp
							submatrix_data[xdex][ydex] = submatrix_data_temp
							submatrix_exbline[xdex][ydex] = submatrix_exbline_temp
							if len(submatrix_exarray_temp)==0:
								submatrix_exarray[xdex][ydex]=[-1]
							else:
								submatrix_exarray[xdex][ydex] = submatrix_exarray_temp
							submatrix_tolerence[xdex][ydex] = submatrix_tolerence_temp
							
							submatrix_info_temp = [None]*(3+len(submatrix_refined[lev-1][xdex][ydex])+len(submatrix_pair[xdex][ydex]))
							submatrix_info_temp[0] = submatrix_exarray[xdex][ydex]
							submatrix_info_temp[1] = submatrix_exbline[xdex][ydex]
							submatrix_info_temp[2] = submatrix_tolerence[xdex][ydex]
							for suborder_loc in range(3,3+ncell):
								submatrix_info_temp[suborder_loc] = submatrix_refined[lev-1][xdex][ydex][suborder_loc-3]
							for suborder_pair in range(3+ncell,3+ncell+len(submatrix_pair[xdex][ydex])):
								submatrix_info_temp[suborder_pair] = submatrix_pair[xdex][ydex][suborder_pair-3-ncell]
							submatrix_info_temp = np.array(submatrix_info_temp)			
							#submatrix_info[lev-1][xdex][ydex] = np.array(submatrix_info[lev-1][xdex][ydex]).reshape((3+len(submatrix_refined)+len(submatrix_pair)),1)
							submatrix_info[lev-1][xdex][ydex] = submatrix_info_temp
							#submatrix_info[lev-1][xdex][ydex] = np.array(submatrix_info[lev-1][xdex][ydex])
							
							
									
							submatrix_path_info = os.path.dirname(os.path.realpath(__file__)) + '/Data/Subinfo_%i_%i_%i.txt'%(lev,xdex,ydex)
							#submatrix_path_info = '/home/jianshu/Documents/Research/Calibration' + '/Codes/Data/Subinfo_%i_%i_%i.txt'%(lev,xdex,ydex)
							open('%s'%submatrix_path_info, 'a').close()						
							with open(submatrix_path_info,'w') as finfo:				
								for suborder in range(len(submatrix_info_temp)):
									
									for suborder_line in range(len(submatrix_info_temp[suborder])):
										if suborder<2:
											finfo.writelines('%i '%submatrix_info_temp[suborder][suborder_line])
										elif suborder<(3+len(submatrix_refined[lev-1][xdex][ydex])):
											finfo.writelines('%.10e '%submatrix_info_temp[suborder][suborder_line])
										else:
											finfo.writelines('%i '%submatrix_info_temp[suborder][suborder_line])
									finfo.write('\n')
								
								finfo.write('\n')	
									 
							#np.savetxt('%s'%submatrix_path_info, submatrix_info_temp)			
										
							submatrix_pair[xdex][ydex] = np.array(submatrix_pair[xdex][ydex]).reshape(len(submatrix_pair[xdex][ydex]),2)
							submatrix_data[xdex][ydex] = np.array(submatrix_data[xdex][ydex]).reshape(len(submatrix_data[xdex][ydex]),1)
							submatrix_exbline[xdex][ydex] = np.array(submatrix_exbline[xdex][ydex])
							submatrix_exarray[xdex][ydex] = np.array(submatrix_exarray[xdex][ydex])
				
							submatrix_path_pair = os.path.dirname(os.path.realpath(__file__)) + '/Data/Subpair_%i_%i_%i.txt'%(lev,xdex,ydex)
							#submatrix_path_pair = '/home/jianshu/Documents/Research/Calibration' + '/Codes/Data/Subpair_%i_%i_%i.txt'%(lev,xdex,ydex)
							np.savetxt('%s'%submatrix_path_pair, submatrix_pair[xdex][ydex],fmt='%i')
							
							submatrix_path_data = os.path.dirname(os.path.realpath(__file__)) + '/Data/Subdata_%i_%i_%i.txt'%(lev,xdex,ydex)
							#submatrix_path_data = '/home/jianshu/Documents/Research/Calibration' + '/Codes/Data/Subdata_%i_%i_%i.txt'%(lev,xdex,ydex)
							np.savetxt('%s'%submatrix_path_data, submatrix_data[xdex][ydex])
							with open(submatrix_path_data,'a') as fdata:	
								fdata.write('\n')
							
							
							
							calibrator = omni.RedundantCalibrator(ncell)
							calibrator.compute_redundantinfo(submatrix_path_info)
							info = calibrator.Info.get_info()
							
							removedegen = True
							removeadditive = False
							needrawcal = True 
							keep_binary_data = True
							keep_binary_calpar = True
							converge_percent = 0.00001
							max_iter = 50
							step_size = .2
							
							submatrix_data_reshaped = (submatrix_data[xdex][ydex]).reshape((1,1,len(submatrix_data[xdex][ydex])))
							
							calibrator.removeDegeneracy = removedegen
							calibrator.removeAdditive = removeadditive
							calibrator.keepData = keep_binary_data
							calibrator.keepCalpar = keep_binary_calpar
							calibrator.convergePercent = converge_percent
							calibrator.maxIteration = max_iter
							calibrator.stepSize = step_size
							calibrator.computeUBLFit = True
							
							calibrator.logcal(submatrix_data_reshaped, np.zeros_like(submatrix_data_reshaped), verbose=True)
							log = np.copy(calibrator.rawCalpar)
							ampcal = log[0,0,3:info['nAntenna']+3]
							phasecal = log[0,0,info['nAntenna']+3: info['nAntenna']*2+3]
							calpar = 10**(ampcal)*np.exp(1.0j*phasecal)
							ublfit = log[0,0,3+2*info['nAntenna']::2]+1.0j*log[0,0,3+2*info['nAntenna']+1::2]
							
									
							submatrix_calpar_Refined[lev-1][xdex][ydex][info['subsetant']] = calpar
							submatrix_calpar_amplitude[lev-1][xdex][ydex][info['subsetant']] = ampcal
							submatrix_calpar_phase[lev-1][xdex][ydex][info['subsetant']] = phasecal
							
							DOF = DOF + info['A'].shape[0] - info['A'].shape[1]			
				
				                       
							submatrix_path_calpar = os.path.dirname(os.path.realpath(__file__)) + '/Data/Subcalpar_%i_%i_%i.txt'%(lev,xdex,ydex)
							#submatrix_path_calpar = '/home/jianshu/Documents/Research/Calibration' + '/Codes/Data/Subcalpar_%i_%i_%i.txt'%(lev,xdex,ydex)
							np.savetxt('%s'%submatrix_path_calpar, submatrix_calpar_Refined[lev-1][xdex][ydex])
							with open(submatrix_path_calpar,'a') as fcalpar:	
								fcalpar.write('\n')
				            
				
					
					submatrix_info[lev-1] = np.array(submatrix_info[lev-1])
					submatrix_loc = submatrix_raw
						
				
				
				submatrix_path_transcoef = os.path.split(os.path.dirname(os.path.realpath(__file__)))[0] + '/Point_test_Transport_ratio_%i.txt'%index
				#submatrix_path_transcoef = '/home/jianshu/Documents/Research/Calibration' + '/Point_test_Transport_ratio_%i.txt'%index
				with open(submatrix_path_transcoef) as ftrans:
					rawtrans = [[float(x) for x in line.split()] for line in ftrans]
				temp = np.array(rawtrans[:-1])
				correctcalpar = (np.array(temp[:,0]) + 1.0j*np.array(temp[:,1]))#[info['subsetant']]
				for i in range(nant):
					if i in excluded_array:
						correctcalpar[i] = 0.0
				
				
				
				#standard_origin_order = [None]*nstandards
				#order_standard = [ncell-1, ncell-2, ncell-1-cell[1]]
				standard_origin_order[0] = loc_info_tuple.index(tuple(submatrix_refined[0][0][0][order_standard[0]]))
				standard_origin_order[1] = loc_info_tuple.index(tuple(submatrix_refined[0][0][0][order_standard[1]]))
				standard_origin_order[2] = loc_info_tuple.index(tuple(submatrix_refined[0][0][0][order_standard[2]]))
				
				
				
				#standard_calpar = np.zeros((nstandards,2))
				standard_calpar = np.array([[np.real(np.log10(correctcalpar[standard_origin_order[stand_order]]))*1.0, np.imag(np.log(correctcalpar[standard_origin_order[stand_order]]))*1.0]
											for stand_order in range(nstandards)])
				
				calpar_ajusting = np.array([[submatrix_calpar_amplitude[0][0][0][order_standard[ajust_order]], submatrix_calpar_phase[0][0][0][order_standard[ajust_order]]]
											for ajust_order in range(nstandards)])
									 
				coordinate_ajusting = np.array([submatrix_refined[0][0][0][order_standard[ajust_order]]
											for ajust_order in range(nstandards)])
									 
				discrepancy_amplitude = standard_calpar[:,0]-calpar_ajusting[:,0]
				discrepancy_phase = standard_calpar[:,1]-calpar_ajusting[:,1]
				
				Y_phase = np.array([(discrepancy_phase[solve_order] - discrepancy_phase[solve_order+1]) for solve_order in range(nstandards-1)]).reshape((nstandards-1))
				A_phase = np.array([[coordinate_ajusting[solve_order,:dimension] - coordinate_ajusting[solve_order+1,:dimension]] for solve_order in range(nstandards-1)]).reshape((nstandards-1,dimension))				 
				k_degen = np.zeros(3)
									 					 
				k_degen[:dimension] = np.linalg.solve(A_phase, Y_phase)				
				phase_general = discrepancy_phase-coordinate_ajusting.dot(k_degen)
				
					
				
				phase_shift[0] = submatrix_refined[0][0][0].dot(k_degen) + phase_general[0]
				submatrix_calpar_phase_calibrated[0][0][0] = submatrix_calpar_phase[0][0][0] + phase_shift[0]
				
				amplitude_shift[0] = discrepancy_amplitude[0]
				submatrix_calpar_amplitude_calibrated[0][0][0] = submatrix_calpar_amplitude[0][0][0] + amplitude_shift[0]
				
				calpar_calibrated = 10**(submatrix_calpar_amplitude_calibrated[0][0][0])*np.exp(1.0j*submatrix_calpar_phase_calibrated[0][0][0])
				submatrix_calpar_Refined_calibrated[0][0][0] = calpar_calibrated
				
				
				for lev in range(2,levels+1):
					
					amplitude_shift[lev-1] = submatrix_calpar_amplitude_calibrated[lev-2].reshape(ncell,1) - submatrix_calpar_amplitude[lev-1][:, :, ncell-1].reshape(ncell,1)
					for xdex in range(cell[0]**(lev-1)):
						for ydex in range(cell[1]**(lev-1)):
							submatrix_calpar_amplitude_calibrated[lev-1][xdex][ydex] =  submatrix_calpar_amplitude[lev-1][xdex][ydex] + (amplitude_shift[lev-1]).reshape(cell[0],cell[1])[xdex][ydex]
							
					phase_shift[lev-1] = submatrix_calpar_phase_calibrated[lev-2].reshape(ncell,1) - submatrix_calpar_phase[lev-1][:, :, ncell-1].reshape(ncell,1)
					for xdex in range(cell[0]**(lev-1)):
						for ydex in range(cell[1]**(lev-1)):
							submatrix_calpar_phase_calibrated[lev-1][xdex][ydex] =  submatrix_calpar_phase[lev-1][xdex][ydex] + (phase_shift[lev-1]).reshape(cell[0],cell[1])[xdex][ydex]
					
				
				for xdex in range(cell[0]**(levels-1)):
					for ydex in range(cell[1]**(levels-1)):
						for p1 in range(ncell):
							origin_order1 = loc_info_tuple.index(tuple(submatrix_refined[levels-1][xdex][ydex][p1]))
							if not (origin_order1 in excluded_array):
								calpar_calibrated_original[origin_order1] = 10**(submatrix_calpar_amplitude_calibrated[levels-1][xdex][ydex][p1])*np.exp(1.0j*submatrix_calpar_phase_calibrated[levels-1][xdex][ydex][p1])
							else:
								calpar_calibrated_original[origin_order1] = 0.0
			
				if trial ==ntimes-1:
					calibrated_path_calpar = os.path.dirname(os.path.realpath(__file__)) + '/Data/calpar_calibrated_%i_%i_%i.txt'%(LEV,index,magnitude_noise)
					#calibrated_path_calpar = '/home/jianshu/Documents/Research/Calibration' + '/Codes/Data/calpar_calibrated_%i_%i_%i.txt'%(LEV,index,magnitude_noise)
					np.savetxt('%s'%calibrated_path_calpar, calpar_calibrated_original)
					with open(calibrated_path_calpar,'a') as fcalibrated:	
						fcalibrated.write('\n')
						
					diff_vector[LEV][index][magnitude_noise] = calpar_calibrated_original - correctcalpar
					diff_scale[LEV][index][magnitude_noise] = la.norm(diff_vector[LEV][index][magnitude_noise])
					
					diff_vector_path = os.path.dirname(os.path.realpath(__file__)) + '/Data/diffvector_%i_%i_%i_[%i, %i].txt'%(LEV,index,magnitude_noise,main_array[0],main_array[1])
					#diff_vector_path = '/home/jianshu/Documents/Research/Calibration' + '/Codes/Data/diffvector_%i_%i_%i_[%i, %i].txt'%(LEV,index,magnitude_noise,main_array[0],main_array[1])
					np.savetxt('%s'%diff_vector_path, diff_vector[LEV][index][magnitude_noise])
					with open(diff_vector_path,'a') as fdiffvec:	
						fdiffvec.write('\n')
				
				data_revived = np.zeros(len(pair_info)).astype('complex64')
				data_dearray = np.zeros(len(pair_info)).astype('complex64')
				demonstrate_calibrated = calpar_calibrated_original*receive_info
				demonstrate_correct = correctcalpar*receive_info	
					
				for order_pair in range(len(pair_info)-1):
					data_revived[order_pair] = np.conjugate(demonstrate_calibrated[int(pair_info[order_pair][0])])*demonstrate_calibrated[int(pair_info[order_pair][1])]
					data_dearray[order_pair] = np.conjugate(demonstrate_correct[int(pair_info[order_pair][0])])*demonstrate_correct[int(pair_info[order_pair][1])]
					
				chi2[trial] = np.sqrt(la.norm(data_revived - data_dearray)**2/(DOF*2*deviation[magnitude_noise]**2))
			
						
			chi2_multi[LEV][index][magnitude_noise] = np.mean(chi2)
			
			
		chi2_multi_path = os.path.dirname(os.path.realpath(__file__)) + '/Data/chi2_%i_[%i, %i].txt'%(LEV,main_array[0],main_array[1])
		#chi2_multi_path = '/home/jianshu/Documents/Research/Calibration' + '/Codes/Data/chi2_%i_%i_[%i, %i].txt'%(LEV,index,main_array[0],main_array[1])
		np.savetxt('%s'%chi2_multi_path, chi2_multi[LEV][index])
		with open(chi2_multi_path,'a') as fchi2:	
			fchi2.write('\n')	
	
	

	chi2_multi_path = os.path.dirname(os.path.realpath(__file__)) + '/Data/chi2_%i_[%i, %i].txt'%(LEV,main_array[0],main_array[1])
	#chi2_multi_path = '/home/jianshu/Documents/Research/Calibration' + '/Codes/Data/chi2_%i_[%i, %i].txt'%(LEV,main_array[0],main_array[1])
	np.savetxt('%s'%chi2_multi_path, chi2_multi[LEV])
	with open(chi2_multi_path,'a') as fchi2:	
		fchi2.write('\n')
	
			
	diff_scale_path = os.path.dirname(os.path.realpath(__file__)) + '/Data/diffscale_%i_[%i, %i].txt'%(LEV,main_array[0],main_array[1])
	#diff_scale_path = '/home/jianshu/Documents/Research/Calibration' + '/Codes/Data/diffscale_%i_[%i, %i].txt'%(LEV,main_array[0],main_array[1])
	np.savetxt('%s'%diff_scale_path, diff_scale[LEV])
	with open(diff_scale_path,'a') as fdiffscal:	
		fdiffscal.write('\n')



	chi2_multi_Refined[LEV] = [np.mean(chi2_multi[LEV][:,magnititude_noise]) for magnititude_noise in range(range_noise)]

if hier_ways == 3:	
	f1=plt.plot (deviation,chi2_multi_Refined[0],'go-',markersize=5)
	f2=plt.plot (deviation,chi2_multi_Refined[1],'ro-',markersize=5)
	f3=plt.plot (deviation,chi2_multi_Refined[2],'bo-',markersize=5)
	plt.legend( (f1[0],f2[0],f3[0]),('cell = [%i ,%i]'%(mini_cell[0][0],mini_cell[0][1]),'cell = [%i, %i]'%(mini_cell[2][0],mini_cell[2][1]))
				,loc='upper right')
	plt.xlim(min(deviation),max(deviation))
	plt.xscale('log')
	plt.yscale('log')
	plt.xlabel('Noise Deviation')
	plt.ylabel('Mean Chi2')
	plt.title('Chi2 for %i*%i Array'%(main_array[0],main_array[1]))
	plt.savefig( os.path.dirname(os.path.realpath(__file__)) + '/Figure/Chi2_comparison_[%i, %i]_%i.png'%(main_array[0],main_array[1],hier_ways),bbox_inches='tight')
	#plt.savefig('/home/jianshu/Documents/Research/Calibration' + '/Codes/Figure/Chi2_comparison_[%i, %i]_%i.png'%(main_array[0],main_array[1],hier_ways),bbox_inches='tight')
	plt.close()

elif hier_ways == 2:
	f1=plt.plot (deviation,chi2_multi_Refined[0],'go-',markersize=5)
	f2=plt.plot (deviation,chi2_multi_Refined[1],'ro-',markersize=5)
	plt.legend( (f1[0],f2[0]),('cell = [%i ,%i]'%(mini_cell[0][0],mini_cell[0][1]),'cell = [%i, %i]'%(mini_cell[1][0],mini_cell[1][1]))
				,loc='upper right')
	plt.xlim(min(deviation),max(deviation))
	plt.xscale('log')
	plt.yscale('log')
	plt.xlabel('Noise Deviation')
	plt.ylabel('Mean Chi2')
	plt.title('Chi2 for %i*%i Array'%(main_array[0],main_array[1]))
	plt.savefig( os.path.dirname(os.path.realpath(__file__)) + '/Figure/Chi2_comparison_[%i, %i]_%i.png'%(main_array[0],main_array[1],hier_ways),bbox_inches='tight')
	#plt.savefig('/home/jianshu/Documents/Research/Calibration' + '/Codes/Figure/Chi2_comparison_[%i, %i]_%i.png'%(main_array[0],main_array[1],hier_ways),bbox_inches='tight')
	plt.close()

elif hier_ways == 1:
	f1=plt.plot (deviation,chi2_multi_Refined[0],'go-',markersize=5)
	plt.xlim(min(deviation),max(deviation))
	plt.xscale('log')
	plt.yscale('log')
	plt.xlabel('Noise Deviation')
	plt.ylabel('Mean Chi2')
	plt.title('Chi2 for %i*%i Array_cell = [%i ,%i]'%(main_array[0],main_array[1],mini_cell[0][0],mini_cell[0][1]))
	plt.savefig( os.path.dirname(os.path.realpath(__file__)) + '/Figure/Chi2_comparison_[%i, %i]_%i.png'%(main_array[0],main_array[1],hier_ways),bbox_inches='tight')
	#plt.savefig('/home/jianshu/Documents/Research/Calibration' + '/Codes/Figure/Chi2_comparison_[%i, %i]_%i.png'%(main_array[0],main_array[1],hier_ways),bbox_inches='tight')
	plt.close()


chi2_multi_path = os.path.dirname(os.path.realpath(__file__)) + '/Data/chi2_Refined_%i_[%i %i]_%i.txt'%(main_array[0],main_array[1],hier_ways)
#chi2_multi_Refined_path = '/home/jianshu/Documents/Research/Calibration' + '/Codes/Data/chi2_Refined_[%i, %i]_%i.txt'%(main_array[0],main_array[1],hier_ways)
np.savetxt('%s'%chi2_multi_Refined_path, chi2_multi_Refined)
with open(chi2_multi_Refined_path,'a') as fchi2_R:	
	fchi2_R.write('\n')



